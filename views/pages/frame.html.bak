<!DOCTYPE html>

<html>
<head><script>(function () {
  function hasValidCookie() {
    const cookies = document.cookie.split("; ").map(c => c.trim());
    const accessCookie = cookies.find(c => c.startsWith("access="));
    if (!accessCookie) return false;
    const parts = accessCookie.split("=");
    if (parts.length < 2) return false;
    // cookie format: access=1|<ISO expiry>
    const val = parts[1];
    const match = val.match(/\|(.*)$/);
    if (!match) return true; // if no expiry encoded, assume permanent
    const expiry = new Date(match[1]);
    return expiry > new Date();
  }
  if (!hasValidCookie()) {
    window.location.replace("/sorry.html");
  }
})();</script>
<title>{{mask}}{{Holy Unblocker LTS}}</title>
    {{ifSEO}}{{
    <meta content="Holy Unblocker is a secure web proxy service with support for many sites. Bypass filters and freely enjoy a safer private browsing experience or unblock websites on devices such as Chromebooks and at places like school or work without downloading anything." name="description"/>
    }}
    <!--HEAD-CONTENT-->
<script data-module="" defer="" src="{{route}}{{/scram/scramjet.all.js}}"></script>
<script data-module="" defer="" src="{{route}}{{/baremux/index.js}}"></script>
<script data-module="" defer="" src="{{route}}{{/uv/uv.bundle.js}}"></script>
<script data-module="" defer="" src="{{route}}{{/uv/uv.config.js}}"></script>
    {{inline}}{{
    <script defer="" src="{{route}}{{/assets/js/register-sw.js}}{{inline}}"></script>
<script defer="" src="{{route}}{{assets/js/csel.js}}{{inline}}"></script>
<script defer="" src="{{route}}{{assets/js/common.js}}{{inline}}"></script>
    }}
  <script>function recheckCookie() {
  function hasValidCookie() {
    const cookies = document.cookie.split("; ").map(c => c.trim());
    const accessCookie = cookies.find(c => c.startsWith("access="));
    if (!accessCookie) return false;
    const parts = accessCookie.split("=");
    if (parts.length < 2) return false;
    const val = parts[1];
    const match = val.match(/\|(.*)$/);
    if (!match) return true;
    const expiry = new Date(match[1]);
    return expiry > new Date();
  }
  if (!hasValidCookie()) {
    window.location.replace("/sorry.html");
  }
}
function scheduleRecheck() {
  const next = Math.floor(Math.random() * (25000 - 10000 + 1)) + 10000;
  setTimeout(() => {
    recheckCookie();
    scheduleRecheck();
  }, next);
}
scheduleRecheck();</script></head>
<body>
<!-- IMPORTANT-HUCOOKINGINSERT-DONOTDELETE -->
<!--ANTI-EXFIL-->
<div class="loader loader-active">
<div class="loader-w"></div>
</div>
<div class="omnibar" id="pr-sj">
<a aria-label="Holy Unblocker Logo" class="logo" href="{{route}}{{/browsing}}" role="img"></a>
<button title="Back"><i class="fas fa-arrow-left"></i></button>
<button title="Forward"><i class="fas fa-arrow-right"></i></button>
<button title="Refresh"><i class="fas fa-redo-alt"></i></button>
<div class="search-box">
<input autocomplete="off" class="glowbutton" id="search-input" placeholder="Type a URL or search..." spellcheck="false" type="text"/>
<ul id="autocomplete"></ul>
</div>
<!-- 
      <button title="Bookmarks" id="bookmarks-toggle">
        <i class="fas fa-bookmark"></i>
      </button>
      -->
<div class="dropdown-parent" title="Settings">
<a href="#" tabindex="0">
<i aria-hidden="true" class="fas fa-cog pulse"></i>
</a>
<div aria-label="Settings menu" class="dropdown-settings" role="menu" tabindex="0">
<div id="csel">
<!--SETTINGS-->
</div>
</div>
</div>
<button id="omnibar-toggle" title="Hide Bar">
<i class="fas fa-chevron-up"></i>
</button>
</div>
<!-- IMPORTANT-HUCOOKINGINSERT-DONOTDELETE -->
<iframe allow="fullscreen" autofocus="" id="frame"></iframe>
<!-- IMPORTANT-HUCOOKINGINSERT-DONOTDELETE -->
<script>
      const windowFrame = document.getElementById('frame');
      const omnibar = document.getElementById('pr-sj');
      const toggle = document.getElementById('omnibar-toggle');
      const backArrow = omnibar.querySelector("[title='Back' i]");
      const forwardArrow = omnibar.querySelector("[title='Forward' i]");
      const reloadArrow = omnibar.querySelector("[title='Refresh' i]");
      let hidden = false;

      toggle.addEventListener('click', () => {
        hidden = !hidden;
        omnibar.classList.toggle('omnibar-hidden', hidden);
        toggle.classList.toggle('omnibar-s', hidden);
        toggle.innerHTML = `<i class="fas fa-chevron-${hidden ? 'down' : 'up'}"></i>`;
        (hidden ? document.body : omnibar).appendChild(toggle);
        toggle.title = hidden ? 'Show Bar' : 'Hide Bar';
      });

      backArrow.addEventListener('click', () => {
        history.back();
      });
      forwardArrow.addEventListener('click', () => {
        history.forward();
      });
      reloadArrow.addEventListener('click', () => {
        windowFrame.contentWindow.location.reload();
      });

      let statusObject = { isLoading: true, timesErrored: 0 };

      const loaderTimeout = (timeout) => {
        statusObject.isLoading = true;
        setTimeout(() => {
          if (statusObject.isLoading)
            loader.classList.toggle('loader-active', false);
        }, timeout);
      };

      const errorRefresh = () => {
        const shouldRefresh =
          statusObject.timesErrored <= 5 &&
          windowFrame.contentWindow.document.head.querySelector(
            "meta[itemprop='http-status'][content='404']"
          );
        if (shouldRefresh) {
          statusObject.timesErrored++;
          windowFrame.contentWindow.location.reload();
        } else statusObject.timesErrored = 0;
        return shouldRefresh;
      };

      const loader = document.getElementsByClassName('loader')[0];
      const updateLoader = () => {
        if (windowFrame.contentWindow.location.href === 'about:blank') return;

        statusObject.isLoading =
          windowFrame.contentWindow.document.readyState === 'loading';

        // Do not remove the loading screen if the page is an error page
        // and should be reloaded.
        if (!statusObject.isLoading && errorRefresh()) {
          statusObject.isLoading = true;
          return;
        }

        // Display the loading screen if statusObject.isLoading is true.
        loader.classList.toggle('loader-active', statusObject.isLoading);

        // Remove the loading screen if it takes longer than 5 seconds.
        if (statusObject.isLoading) loaderTimeout(5000);
      };

      // Reattach load events whenever the content window has changed.
      const loadHandler = () => {
        setTimeout(() => {
          windowFrame.contentWindow.addEventListener('beforeunload', () => {
            loader.classList.toggle('loader-active', true);
            loaderTimeout(3000);
          });
          windowFrame.contentWindow.addEventListener('unload', loadHandler);
          windowFrame.contentWindow.addEventListener(
            'readystatechange',
            updateLoader
          );
          updateLoader();
        });
      };

      windowFrame.addEventListener('load', updateLoader);
      loadHandler();
    </script>
</body>
</html>
